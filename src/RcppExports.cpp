// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_all_locations_cpp
std::vector<double> get_all_locations_cpp(double max_sec, const std::vector<double>& times, const std::vector<double>& antennae, const Rcpp::NumericMatrix& site_map, double prev_day_location);
RcppExport SEXP _stickleR_get_all_locations_cpp(SEXP max_secSEXP, SEXP timesSEXP, SEXP antennaeSEXP, SEXP site_mapSEXP, SEXP prev_day_locationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type max_sec(max_secSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type antennae(antennaeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type site_map(site_mapSEXP);
    Rcpp::traits::input_parameter< double >::type prev_day_location(prev_day_locationSEXP);
    rcpp_result_gen = Rcpp::wrap(get_all_locations_cpp(max_sec, times, antennae, site_map, prev_day_location));
    return rcpp_result_gen;
END_RCPP
}
// make_matrix_class
Rcpp::NumericMatrix make_matrix_class(const std::vector<double>& times, const std::vector<double>& location, const std::vector<double>& fish, int num_fish);
RcppExport SEXP _stickleR_make_matrix_class(SEXP timesSEXP, SEXP locationSEXP, SEXP fishSEXP, SEXP num_fishSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type fish(fishSEXP);
    Rcpp::traits::input_parameter< int >::type num_fish(num_fishSEXP);
    rcpp_result_gen = Rcpp::wrap(make_matrix_class(times, location, fish, num_fish));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stickleR_get_all_locations_cpp", (DL_FUNC) &_stickleR_get_all_locations_cpp, 5},
    {"_stickleR_make_matrix_class", (DL_FUNC) &_stickleR_make_matrix_class, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_stickleR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
